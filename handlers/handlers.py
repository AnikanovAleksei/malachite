import os
from aiogram.filters import CommandStart, or_f
from aiogram.types import Message, CallbackQuery
from aiogram import Router, types, F
from sqlalchemy import delete
from handlers.contact import router as manager_router
from handlers.help_handlers import router as helper
from filters.config import (IPHONE_CATEGORY_ID, IPAD_CATEGORY_ID, WATCH_CATEGORY_ID, PODS_CATEGORY_ID,
                            MACBOOK_CATEGORY_ID)
from dotenv import load_dotenv
from keyboards import keyboards as kb
from database import requests as rq
from database.models import async_session


load_dotenv()
TOKEN = os.getenv('TOKEN_ID')


router = Router()

router.include_router(helper)
router.include_router(manager_router)


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    async with async_session() as session:
        await rq.create_user_if_not_exists(session, message.from_user.id, message.from_user.username)

    await message.answer(
        text=(
            "Malachite ‚Äî –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ Apple üçè\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Malachite ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Å—Ç–∏–ª—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π! ‚ú® –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n\n"
            "üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –∑–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –∫–ª–∏–µ–Ω—Ç–µ.\n\n"
            "üéÅ –ü—Ä–µ–º–∏–∞–ª—å–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É –¥–ª—è –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ Apple. –ö–∞–∂–¥–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç "
            "–æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏!\n\n"
            "‚öôÔ∏è –í—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç Apple.\n\n"
            "–° –Ω–∞–º–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–æ–ø–æ–≤—ã–µ –≥–∞–¥–∂–µ—Ç—ã, –Ω–æ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üöÄ"
        ),
        reply_markup=kb.main_keyboard
    )


@router.message(or_f(F.text == '–ö–∞—Ç–∞–ª–æ–≥', F.text == '/menu'))
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.get_catalog())


@router.callback_query(F.data.startswith('category_'))
async def category_selected(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[1])
    device_type = ''
    if category_id == IPHONE_CATEGORY_ID:
        device_type = 'iPhone'
        models = await rq.get_models_by_category(IPHONE_CATEGORY_ID)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {device_type}',
                                      reply_markup=await kb.get_models_keyboard(models))
    elif category_id == IPAD_CATEGORY_ID:
        device_type = 'iPad'
        models = await rq.get_models_by_category(IPAD_CATEGORY_ID)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {device_type}',
                                      reply_markup=await kb.get_models_keyboard(models))
    elif category_id == WATCH_CATEGORY_ID:
        device_type = 'Watch'
        models = await rq.get_models_by_category(WATCH_CATEGORY_ID)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {device_type}',
                                      reply_markup=await kb.get_models_keyboard(models))
    elif category_id == PODS_CATEGORY_ID:
        device_type = 'AirPods'
        models = await rq.get_models_by_category(PODS_CATEGORY_ID)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {device_type}',
                                      reply_markup=await kb.get_models_keyboard(models))
    elif category_id == MACBOOK_CATEGORY_ID:
        device_type = 'MacBook'
        models = await rq.get_models_by_category(MACBOOK_CATEGORY_ID)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {device_type}',
                                      reply_markup=await kb.get_models_keyboard(models))
    else:
        await callback.message.answer('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–æ–¥–µ–ª–∏')

    await callback.message.delete()

    if device_type:
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {device_type}')


user_context = {}


@router.callback_query(F.data.startswith('model_'))
async def model_selected(callback: CallbackQuery):
    try:
        model_id = int(callback.data.split('_')[1])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    model = await rq.get_model(model_id)
    if not model:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await callback.message.delete()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
    colors = await rq.get_models_colors(model_id)
    if not colors:
        await callback.message.answer(f'–¶–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        await callback.message.delete()
        return

    keyboard = await kb.get_colors_keyboard(colors, model.category_id)
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è –º–æ–¥–µ–ª–∏: {model.name}', reply_markup=keyboard)
    await callback.message.delete()
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {model.name}')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.from_user.id not in user_context:
        user_context[callback.from_user.id] = {}
    user_context[callback.from_user.id]['model_id'] = model_id
    user_context[callback.from_user.id]['category_id'] = model.category_id


@router.callback_query(F.data.startswith('color_'))
async def color_selected(callback: CallbackQuery):
    try:
        color_id = int(callback.data.split('_')[1])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    color = await rq.get_color(color_id)
    if not color:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await callback.message.delete()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.from_user.id not in user_context:
        user_context[callback.from_user.id] = {}
    user_context[callback.from_user.id]['color_id'] = color_id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    model = await rq.get_model_by_color(color_id)
    if not model:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await callback.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    if model.category_id == WATCH_CATEGORY_ID:
        screen_sizes = await rq.get_screen_sizes_by_model(model.id)
        if not screen_sizes:
            await callback.message.answer(f'–†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            await callback.message.delete()
            return

        screen_size_keyboard = await kb.get_screen_size_keyboard(screen_sizes)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏: {model.name}',
                                      reply_markup=screen_size_keyboard)
    elif model.category_id in [IPHONE_CATEGORY_ID, IPAD_CATEGORY_ID, MACBOOK_CATEGORY_ID]:
        memories = await rq.get_memories_by_model(model.id)
        if not memories:
            await callback.message.answer(f'–ü–∞–º—è—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏ {model.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            await callback.message.delete()
            return

        memory_keyboard = await kb.get_memory_keyboard(memories)
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–º—è—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏: {model.name}', reply_markup=memory_keyboard)
    elif model.category_id == PODS_CATEGORY_ID:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
        item = await rq.get_item_by_color_and_model(color.id, model.id)
        if not item:
            await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏.')
            await callback.message.delete()
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        message_text = f'–í–∞—à —Ç–æ–≤–∞—Ä:\n\n' \
                       f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.name}\n' \
                       f'–ú–æ–¥–µ–ª—å: {model.name}\n' \
                       f'–¶–≤–µ—Ç: {color.name}\n' \
                       f'–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n\n' \
                       f'–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description}'

        await callback.message.answer(message_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        add_to_basket_keyboard = await kb.get_add_to_basket_keyboard(item.id)
        await callback.message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=add_to_basket_keyboard)

    await callback.message.delete()
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {color.name}')


@router.callback_query(F.data.startswith('memory_'))
async def memory_selected(callback: CallbackQuery):
    try:
        memory_id = int(callback.data.split('_')[1])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    memory = await rq.get_memory(memory_id)
    if not memory:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await callback.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ callback.from_user.id –≤ —Å–ª–æ–≤–∞—Ä–µ user_context
    if callback.from_user.id not in user_context or 'color_id' not in user_context[callback.from_user.id]:
        await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç.')
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    color = await rq.get_color(user_context[callback.from_user.id]['color_id'])
    if not color:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await callback.message.delete()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    model = await rq.get_model_by_color(color.id)
    if not model:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await callback.message.delete()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.from_user.id not in user_context:
        user_context[callback.from_user.id] = {}
    user_context[callback.from_user.id]['memory_id'] = memory_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    if model.category_id == MACBOOK_CATEGORY_ID:
        rams = await rq.get_rams_by_model(model.id)
        if not rams:
            await callback.message.answer(f'–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏ {model.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            await callback.message.delete()
            return

        ram_keyboard = await kb.get_ram_keyboard(rams)
        await callback.message.delete()
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏: {model.name}',
                                      reply_markup=ram_keyboard)
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {memory.size}')
    elif model.category_id == IPAD_CATEGORY_ID:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        connectivities = await rq.get_connectivities_by_model(model.id)
        if not connectivities:
            await callback.message.answer(f'–¢–∏–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            await callback.message.delete()
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_keyboard = await kb.get_connection_keyboard(connectivities)
        await callback.message.delete()
        await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏: {model.name}',
                                      reply_markup=connection_keyboard)
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {memory.size}')
    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏, —Ü–≤–µ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
        item = await rq.get_item_by_memory_color_and_model(memory.id, color.id, model.id)
        if not item:
            await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏.')
            await callback.message.delete()
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        message_text = f'–í–∞—à —Ç–æ–≤–∞—Ä:\n\n' \
                       f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.name}\n' \
                       f'–ú–æ–¥–µ–ª—å: {model.name}\n' \
                       f'–¶–≤–µ—Ç: {color.name}\n' \
                       f'–ü–∞–º—è—Ç—å: {memory.size}\n' \
                       f'–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n\n' \
                       f'–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description}'

        await callback.message.answer(message_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        add_to_basket_keyboard = await kb.get_add_to_basket_keyboard(item.id)
        await callback.message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=add_to_basket_keyboard)

    await callback.message.delete()
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {memory.size}')


@router.callback_query(F.data.startswith('ram_'))
async def ram_selected(callback: CallbackQuery):
    try:
        ram_id = int(callback.data.split('_')[1])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π 'color_id', 'memory_id' –∏ 'model_id' –≤ —Å–ª–æ–≤–∞—Ä–µ user_context
    if (callback.from_user.id not in user_context or 'color_id' not in user_context[callback.from_user.id]
            or 'memory_id' not in user_context[callback.from_user.id]
            or 'model_id' not in user_context[callback.from_user.id]):
        await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, —Ü–≤–µ—Ç –∏ –ø–∞–º—è—Ç—å.')
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ü–≤–µ—Ç–∞ –∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model = await rq.get_model(user_context[callback.from_user.id]['model_id'])
    color = await rq.get_color(user_context[callback.from_user.id]['color_id'])
    memory = await rq.get_memory(user_context[callback.from_user.id]['memory_id'])
    if not model or not color or not memory:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å, —Ü–≤–µ—Ç –∏–ª–∏ –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        await callback.message.delete()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    ram = await rq.get_ram(ram_id)
    if not ram:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await callback.message.delete()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, —Ü–≤–µ—Ç–∞, –ø–∞–º—è—Ç–∏ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    item = await rq.get_item_by_model_memory_color_and_ram(model.id, memory.id, color.id, ram.id)
    if not item:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏.')
        await callback.message.delete()
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    message_text = f'–í–∞—à —Ç–æ–≤–∞—Ä:\n\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.name}\n' \
                   f'–ú–æ–¥–µ–ª—å: {model.name}\n' \
                   f'–¶–≤–µ—Ç: {color.name}\n' \
                   f'–ü–∞–º—è—Ç—å: {memory.size}\n' \
                   f'–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {ram.size}\n' \
                   f'–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n\n' \
                   f'–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description}'

    await callback.message.answer(message_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_basket_keyboard = await kb.get_add_to_basket_keyboard(item.id)
    await callback.message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=add_to_basket_keyboard)

    await callback.message.delete()
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {ram.size}')


@router.callback_query(F.data.startswith('connection_'))
async def connection_selected(callback: CallbackQuery):
    try:
        connectivity_id = int(callback.data.split('_')[1])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ü–≤–µ—Ç–∞, –ø–∞–º—è—Ç–∏ –∏ —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model = await rq.get_model(user_context[callback.from_user.id]['model_id'])
    color = await rq.get_color(user_context[callback.from_user.id]['color_id'])
    memory = await rq.get_memory(user_context[callback.from_user.id]['memory_id'])
    connectivity = await rq.get_connectivity(connectivity_id)
    if not model or not color or not memory or not connectivity:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å, —Ü–≤–µ—Ç, –ø–∞–º—è—Ç—å –∏–ª–∏ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        await callback.message.delete()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, —Ü–≤–µ—Ç–∞, –ø–∞–º—è—Ç–∏ –∏ —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    item = await rq.get_item_by_memory_color_model_and_connectivity(memory.id, color.id, model.id, connectivity.id)
    if not item:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏.')
        await callback.message.delete()
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    message_text = f'–í–∞—à —Ç–æ–≤–∞—Ä:\n\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.name}\n' \
                   f'–ú–æ–¥–µ–ª—å: {model.name}\n' \
                   f'–¶–≤–µ—Ç: {color.name}\n' \
                   f'–ü–∞–º—è—Ç—å: {memory.size}\n' \
                   f'–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connectivity.type}\n' \
                   f'–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n\n' \
                   f'–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description}'

    await callback.message.answer(message_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_basket_keyboard = await kb.get_add_to_basket_keyboard(item.id)
    await callback.message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=add_to_basket_keyboard)

    await callback.message.delete()
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {connectivity.type}')


@router.callback_query(F.data.startswith('screen_size_'))
async def screen_size_selected(callback: CallbackQuery):
    try:
        screen_size_id = int(callback.data.split('_')[2])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    screen_size = await rq.get_screen_size(screen_size_id)
    if not screen_size:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await callback.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ callback.from_user.id –≤ —Å–ª–æ–≤–∞—Ä–µ user_context
    if callback.from_user.id not in user_context or 'color_id' not in user_context[callback.from_user.id]:
        await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç.')
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    color = await rq.get_color(user_context[callback.from_user.id]['color_id'])
    if not color:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await callback.message.delete()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    model = await rq.get_model_by_color(color.id)
    if not model:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await callback.message.delete()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.from_user.id not in user_context:
        user_context[callback.from_user.id] = {}
    user_context[callback.from_user.id]['screen_size_id'] = screen_size_id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞, —Ü–≤–µ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
    item = await rq.get_item_by_screen_size_color_and_model(screen_size.id, color.id, model.id)
    if not item:
        await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏.')
        await callback.message.delete()
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    message_text = f'–í–∞—à —Ç–æ–≤–∞—Ä:\n\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.name}\n' \
                   f'–ú–æ–¥–µ–ª—å: {model.name}\n' \
                   f'–¶–≤–µ—Ç: {color.name}\n' \
                   f'–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {screen_size.size}\n' \
                   f'–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n\n' \
                   f'–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description}'

    await callback.message.answer(message_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_basket_keyboard = await kb.get_add_to_basket_keyboard(item.id)
    await callback.message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=add_to_basket_keyboard)

    await callback.message.delete()
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {screen_size.size}')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@router.callback_query(F.data.startswith('back_to_categories'))
async def back_to_categories(callback: CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=await kb.get_catalog())
    await callback.message.delete()
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')


# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç —Ü–≤–µ—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
@router.callback_query(F.data.startswith('back_to_models'))
async def back_to_models(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[3])
    models = await rq.get_models_by_category(category_id)
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å:', reply_markup=await kb.get_models_keyboard(models))
    await callback.message.delete()
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏')


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–∞–º—è—Ç–∏ –∫ —Ü–≤–µ—Ç—É
# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞
ALLOWED_CATEGORIES = {IPHONE_CATEGORY_ID, IPAD_CATEGORY_ID, MACBOOK_CATEGORY_ID, WATCH_CATEGORY_ID}


@router.callback_query(F.data == 'back_to_colors')
async def back_to_colors(callback: CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ model_id –∏ category_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_context.get(callback.from_user.id)
    if user_data:
        model_id = user_data['model_id']
        category_id = user_data['category_id']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id in ALLOWED_CATEGORIES:
            colors = await rq.get_models_colors(model_id)
            keyboard = await kb.get_colors_keyboard(colors, category_id)
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:', reply_markup=keyboard)
            await callback.message.delete()
            await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞')
        else:
            await callback.message.answer('–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
    else:
        await callback.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.')


@router.callback_query(F.data == 'back_to_memory')
async def back_to_memory(callback: CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    color = await rq.get_color(user_context[callback.from_user.id]['color_id'])
    model = await rq.get_model_by_color(color.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    memories = await rq.get_memories_by_model(model.id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–º—è—Ç–∏
    memory_keyboard = await kb.get_memory_keyboard(memories)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–º—è—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏: {model.name}', reply_markup=memory_keyboard)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–∞–º—è—Ç–∏')


@router.callback_query(F.data.startswith('add_to_basket_'))
async def add_to_basket(callback: CallbackQuery):
    try:
        item_id = int(callback.data.split('_')[3])
    except (ValueError, IndexError):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_id = callback.from_user.id
    success = await rq.add_item_to_basket(user_id, item_id)

    if success:
        await callback.message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    else:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()


@router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞')
async def show_basket(message: Message):
    user_id = message.from_user.id
    basket_items = await rq.get_basket_items(user_id)

    if not basket_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=kb.get_basket_keyboard())
        return

    basket_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total_price = 0
    for basket_item, item, model, color, screen_size, memory, connectivity, ram in basket_items:
        item_total_price = float(item.price) * basket_item.quantity
        basket_text += f"{model.name} ({basket_item.quantity} —à—Ç.)\n" \
                       f"–¶–≤–µ—Ç: {color.name}\n"

        if screen_size:
            basket_text += f"–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {screen_size.size}\n"

        if memory:
            basket_text += f"–ü–∞–º—è—Ç—å: {memory.size}\n"

        if model.category_id == IPAD_CATEGORY_ID:
            basket_text += f"–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connectivity.type}\n"

        if model.category_id == MACBOOK_CATEGORY_ID:
            basket_text += f"–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {ram.size}\n"

        basket_text += f"–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n" \
                       f"–°—É–º–º–∞: {item_total_price} —Ä—É–±.\n\n"
        total_price += item_total_price

    basket_text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±."
    await message.answer(basket_text, reply_markup=kb.get_basket_keyboard())


@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    user_id = message.from_user.id
    main_keyboard = await kb.main_keyboard(user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.get_catalog())

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer('–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ', reply_markup=main_keyboard)


@router.message(F.text == '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
async def clear_basket(message: Message):
    user_id = message.from_user.id
    async with rq.async_session() as session:
        await session.execute(
            delete(rq.Basket).where(rq.Basket.user_id == user_id)
        )
        await session.commit()
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=kb.main_keyboard)


@router.message(F.text == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
async def individual_request(message: Message):
    response_text = (
        "–ö–Ω–æ–ø–∫–∞ \"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å\" –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, \n"
        "–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É, –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ, \n"
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º. \n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
        "- –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.\n\n"
        "- –£–∑–Ω–∞—Ç—å –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.\n\n"
        "- –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.\n\n"
        "- –ù–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.\n\n"
        "–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ \"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å\"."
    )
    await message.answer(response_text, reply_markup=kb.get_individual_request_keyboard(), parse_mode="Markdown")


@router.callback_query(F.data == 'back_to_main')
async def back_to_main_menu(callback_query: CallbackQuery):
    await callback_query.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await callback_query.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.main_keyboard)
    await callback_query.answer()


@router.message(F.text == '–ù–∞–∑–∞–¥')
async def back_to_main(message: Message):
    main_keyboard = await kb.get_main_keyboard()
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_keyboard)
