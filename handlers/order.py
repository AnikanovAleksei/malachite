from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from keyboards import keyboards as kb
from database import requests as rq
from aiogram import Bot

import re

from keyboards.keyboards import get_number, main_keyboard
from database.models import async_session, Order
from database.requests import notify_admins
from filters.config import (IPAD_CATEGORY_ID, MACBOOK_CATEGORY_ID)
from state.register import OrderState

order_router = Router()


@order_router.message(F.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def order_delivery(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cart_items = await rq.get_basket_items(user_id)

    if not cart_items:
        await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        return

    await message.answer('–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö \n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:', reply_markup=kb.get_cancel_keyboard())
    await state.set_state(OrderState.waiting_for_name)


@order_router.message(OrderState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_order(message, state)
        return

    name = message.text
    await state.update_data(name=name)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: \n', reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderState.waiting_for_address)


@order_router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    await message.answer(
        f'üéØ–ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏.üéØ \nüì±–£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:üì± \n'
        f'–ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 xxx xxx xx xx',
        reply_markup=get_number
    )
    await state.set_state(OrderState.waiting_for_phone)


@order_router.message(OrderState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if message.content_type == 'contact':
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text

    if re.match(r'^\+?\d{11}$', phone_number):
        await state.update_data(phone=phone_number)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à email:', reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderState.waiting_for_email)
    else:
        await message.answer('–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 xxx xxx xx xx')


@order_router.message(OrderState.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    if re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
        await state.update_data(email=email)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderState.waiting_for_delivery_datetime)
    else:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑:')


@order_router.message(OrderState.waiting_for_delivery_datetime)
async def process_delivery_datetime(message: Message, state: FSMContext, bot: Bot):
    delivery_datetime = message.text
    await state.update_data(delivery_datetime=delivery_datetime)
    user_data = await state.get_data()
    await save_order_to_db(message.from_user.id, user_data)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    basket_items = await rq.get_basket_items(message.from_user.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    response_message = (
        f'–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!‚úÖ\n'
        f'üë§–§–ò–û: {user_data["name"]}\n'
        f'üöõ–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data["address"]}\n'
        f'‚òéÔ∏è–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data["phone"]}\n'
        f'üóÇEmail: {user_data["email"]}\n'
        f'üöÄ–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data["delivery_datetime"]}\n\n'
        f'–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n'
    )

    total_price = 0
    items_text = ""
    for basket_item, item, model, color, screen_size, memory, connectivity, ram in basket_items:
        item_total_price = float(item.price) * basket_item.quantity
        items_text += f"{model.name} ({basket_item.quantity} —à—Ç.)\n" \
                      f"–¶–≤–µ—Ç: {color.name}\n"

        if screen_size:
            items_text += f"–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {screen_size.size}\n"

        if memory:
            items_text += f"–ü–∞–º—è—Ç—å: {memory.size}\n"

        if model.category_id == IPAD_CATEGORY_ID:
            items_text += f"–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connectivity.type}\n"

        if model.category_id == MACBOOK_CATEGORY_ID:
            items_text += f"–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {ram.size}\n"

        items_text += f"–¶–µ–Ω–∞: {item.price} —Ä—É–±.\n" \
                      f"–°—É–º–º–∞: {item_total_price} —Ä—É–±.\n\n"
        total_price += item_total_price

    items_text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
    response_message += items_text
    response_message += f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–π–¥–µ—Ç —Å –í–∞–º–∏ –Ω–∞ —Å–≤—è–∑—å'

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ user_data
    user_data["items"] = items_text

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await rq.clear_basket(message.from_user.id)

    await message.answer(response_message, reply_markup=main_keyboard)
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    await notify_admins(bot, user_data)


async def save_order_to_db(user_id: int, data: dict):
    async with async_session() as session:
        order = Order(
            user_id=user_id,
            name=data['name'],
            address=data['address'],
            phone=data['phone'],
            email=data['email'],
            delivery_datetime=data['delivery_datetime']
        )
        session.add(order)
        await session.commit()


async def cancel_order(message: Message, state: FSMContext):
    await message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main_keyboard)
    await state.clear()

handlers_router = order_router
