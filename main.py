from aiogram import Dispatcher, Bot
import asyncio
import os
from dotenv import load_dotenv
from handlers.handlers import router as handlers_router
from database.models import async_main
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import requests as rq
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramForbiddenError

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


async def send_scheduled_message(bot: Bot):
    users = await rq.get_all_users()
    message_text = ("üéÆ –ê–∫—Ü–∏—è –∫–æ –î–Ω—é –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞! üéâ \n\n"
                    
                    "–î–æ—Ä–æ–≥–∏–µ –Ω–∞—à–∏ –º—É–∂—á–∏–Ω—ã ‚Äî –∑–∞—â–∏—Ç–Ω–∏–∫–∏, –≥–µ—Ä–æ–∏ –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ! üí™ \n\n"
                    "–í –∑–Ω–∞–∫ –Ω–∞—à–µ–≥–æ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –º—ã –¥–∞—Ä–∏–º –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:"
                    "–í–°–ï –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏! üïπÔ∏èüî• \n\n"
                    "–£–∑–Ω–∞–π—Ç–µ —Ü–µ–Ω—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å! üì© \n\n"
                    "üìÖ –¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. \n\n"
                    
                    "Malachite ‚Äî —Ä–∞–¥—É–µ–º –≤–∞—Å –≤—Å–µ–≥–¥–∞! üíö \n\n")

    image_path = '/root/malachite/image/IMG_1484.JPG'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = FSInputFile(image_path)

    for user in users:
        if user.telegram_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await bot.send_photo(chat_id=user.telegram_id, photo=photo, caption=message_text)
            except TelegramForbiddenError:
                print(f"Bot was blocked by the user {user.telegram_id}")
            except Exception as e:
                print(f"Failed to send message to user {user.telegram_id}: {e}")


async def main():
    load_dotenv()
    await async_main()
    bot = Bot(token=os.getenv('TOKEN_ID'))

    dp = Dispatcher()
    dp.include_router(handlers_router)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if not scheduler.get_job("daily_post"):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ 14:00
        scheduler.add_job(send_scheduled_message, 'cron', hour=14, minute=10, args=[bot], id="daily_post")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
