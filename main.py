from aiogram import Dispatcher, Bot
import asyncio
import os
from dotenv import load_dotenv
from handlers.handlers import router as handlers_router
from handlers.order import router as order_router
from database.models import async_main
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database.requests import get_all_users  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TOKEN_ID'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()


async def send_message_to_all_users(bot_instance: Bot, message_text: str):
    try:
        users = await get_all_users()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        semaphore = asyncio.Semaphore(10)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        async def send_message(user):
            async with semaphore:
                await bot_instance.send_message(chat_id=user.telegram_id, text=message_text)

        await asyncio.gather(*(send_message(user) for user in users))
    except Exception as ex:
        logger.error(f"Error sending messages: {ex}")


async def main():
    await async_main()
    dp = Dispatcher()
    dp.include_router(handlers_router)
    dp.include_router(order_router)

    # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    message_text = (
        "–í —á–µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞!\n\nüîî "
        "–£ –Ω–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ª—é–±–∏—Ç–µ–ª–µ–π –Ω–æ–≤–∏–Ω–æ–∫ Apple!\n\nüéâ "
        "\"iPhone 16 Pro Max\" –≤—Å–µ–≥–æ –æ—Ç 123.000‚ÇΩ!\n\nüí• "
        "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π —Å–∞–º–æ–≥–æ –ø–µ—Ä–µ–¥–æ–≤–æ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞!\n\nüì± "
        "–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏.\n\n"
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"
    )

    # –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    await send_message_to_all_users(bot, message_text)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    scheduler.add_job(send_message_to_all_users, 'interval', minutes=10, args=[bot, message_text])

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('Exit')
    except Exception as e:
        logger.error(f"An error occurred: {e}")
