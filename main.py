from aiogram import Dispatcher, Bot
import asyncio
import os
from dotenv import load_dotenv
from handlers.handlers import router as handlers_router
from database.models import async_main
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import requests as rq
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramForbiddenError

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


async def send_scheduled_message(bot: Bot):
    users = await rq.get_all_users()
    message_text = ("üéâ –°—É–ø–µ—Ä–∞–∫—Ü–∏—è –õ–∞–≤–∏–Ω–∞ –ú–∞–ª–∞—Ö–∏—Ç–∞! –¢–æ–ª—å–∫–æ 24 —á–∞—Å–∞! üì±üí• \n\n"
                    "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –Ω–æ–≤—ã—Ö iPhone 16 –ø–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º —Ü–µ–Ω–∞–º! \n\n"
                    
                    "üîπ iPhone 16 Pro 256GB ‚Äî –≤—Å–µ–≥–æ –∑–∞ 96,000 ‚ÇΩ! üì≤‚ú® \n\n"
                    "üîπ iPhone 16 Pro Max 256GB ‚Äî –≤—Å–µ–≥–æ –∑–∞ 107,000 ‚ÇΩ! üì±üåü \n\n"
                    
                    "–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! üöÄ \n\n"
                    
                    "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. üìûüí¨ \n\n"
                    "–ü—Ä–µ–æ–±—Ä–∞–∑–∏—Ç–µ —Å–≤–æ–π –º–∏—Ä —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ iPhone 16! ü•≥ \n\n")

    image_path = '/root/malachite/image/IMG_1537.JPG'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = FSInputFile(image_path)

    for user in users:
        if user.telegram_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await bot.send_photo(chat_id=user.telegram_id, photo=photo, caption=message_text)
            except TelegramForbiddenError:
                print(f"Bot was blocked by the user {user.telegram_id}")
            except Exception as e:
                print(f"Failed to send message to user {user.telegram_id}: {e}")


async def main():
    load_dotenv()
    await async_main()
    bot = Bot(token=os.getenv('TOKEN_ID'))

    dp = Dispatcher()
    dp.include_router(handlers_router)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if not scheduler.get_job("daily_post"):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ 14:00
        scheduler.add_job(send_scheduled_message, 'cron', hour=13, minute=55, args=[bot], id="daily_post")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
